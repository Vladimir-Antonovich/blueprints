tosca_definitions_version: cloudify_dsl_1_3

description: >
  This blueprint installs VNF Cisco CSR1000V

imports:
  - http://www.getcloudify.org/spec/cloudify/3.4/types.yaml
  - http://www.getcloudify.org/spec/openstack-plugin/1.4/plugin.yaml
  - http://www.getcloudify.org/spec/fabric-plugin/1.4.1/plugin.yaml

inputs:

# Cisco CSR1000v inputs
  image:
    type: string
    description:   "csr1000v-universalk9.03.17.02.S.156-1.S2-std.qcow2"
    default: "d1d5a436-ceaa-40a1-8c28-62440c71c3c7"

  flavor:
    type: string
    description: "dc1.2x4.40"
    default: "196235bc-7ca5-4085-ac81-7e0242bda3f9"

  user:
    type: string
    default: vnf
    
  password:
    type: string
    default: vnf

  personality_filename:
    type: string
    default: "iosxe_config.txt"

  personality_file_data:
    type: string
    description: Cisco commands to enable ssh and mgmt interface
    default: |
      hostname csr1000v
      username vnf privilege 15 password 0 vnf
      ip domain-name nfv.lab
      crypto key generate rsa modulus 1024
      service password-encryption
      aaa new-model
      ip routing
      interface GigabitEthernet1
      ip address dhcp
      no shutdown
      exit
      interface GigabitEthernet2
      ip address dhcp
      no shutdown
      exit
      interface GigabitEthernet3
      ip address dhcp
      no shutdown
      exit
      line vty 0 4
      transport input ssh
      password vnf
      privil level 15
      exit
      enable password vnf
      ip route 0.0.0.0 0.0.0.0 dhcp
      end
      

  cisco_new_name:
    type: string
    description: "new router name"
    default: "cisco_new_name"
# VMs data

  vm_image:
    type: string
    description: "CentOS 7.2"
    default: "ebab03e6-a674-4b6e-8f60-691c90fbcdc6"

  vm_flavor:
    type: string
    description: "dc1.2x2.40"
    default: "c4b193d2-f331-4250-9b15-bbfde97c462a"

# Networks
    
  public_network_static_ip:
    default: "172.16.0.1"
    type: string
    
  external_network_name:
    type: string
    description: Network of FloatingIP
    default: "external"

  management_network_name:
    type: string
    description: It should be assigned to GigabitEthernet1 interface
    default: "cfy-management-network-vlad"

  management_port:
    type: string
    description: SSH port
    default: 22

  cisco_network1:
    type: string
    default: cisco_network1

  cisco_network1_subnet:
    type: string
    default: cisco_network1_subnet

  cisco_network1_cidr:
    type: string
    default: 172.11.0.0/28

  network1_cisco_port_ip:
    type: string
    default: 172.11.0.1

  cisco_network2:
    type: string
    default: cisco_network2

  cisco_network2_subnet:
    type: string
    default: cisco_network2_subnet

  cisco_network2_cidr:
    type: string
    default: 172.21.0.0/28

  network2_cisco_port_ip:
    type: string
    default: 172.21.0.1

  web_server_port_ip:
    type: string
    description: "vm1 IP"
    default: 172.11.0.3
    
  client_port_ip:
    type: string
    description: "vm2 IP"
    default: 172.21.0.3

node_templates:
        
  csr1000v_node:
    type: cloudify.openstack.nodes.Server
    properties:
      install_agent: false
      resource_id: CSR1000V-router
      management_network_name: { get_input: management_network_name }
    interfaces:
      cloudify.interfaces.lifecycle:
        create:
          inputs:
            args:
              image: ''
              flavor: { get_input: flavor }
              availability_zone: "Production"
              config_drive: true
              block_device_mapping_v2:
                - boot_index: 0
                  uuid: { get_input: image }
                  source_type: 'image'
                  volume_size: 8
                  destination_type: 'volume'
                  delete_on_termination: true
              files: 
                "iosxe_config.txt":  { get_input: personality_file_data }
    relationships:
      - target: csr_floating_ip
        type: cloudify.openstack.server_connected_to_floating_ip
      - target: csr_security_group
        type: cloudify.openstack.server_connected_to_security_group
      - target: network1_port1
        type: cloudify.relationships.connected_to
      - target: network2_port1
        type: cloudify.relationships.connected_to

      
# CSR1000V configuration via SSH

  csr1000v-set-hostname:
    type: cloudify.nodes.ApplicationServer
    interfaces:
      cloudify.interfaces.lifecycle:
        start:
          implementation: fabric.fabric_plugin.tasks.run_task
          inputs:
            tasks_file: "scripts/tasks.py"
            task_name: set_hostname
            task_properties:
              hostname: { get_input: cisco_new_name }
            fabric_env:
              host_string: { get_attribute: [ csr_floating_ip, floating_ip_address ] }
              user: { get_input: user }
              password: { get_input: password }
              use_shell: false
              no_agent: true
              no_keys: true
              key_filename: ''
    relationships:
      - type: cloudify.relationships.contained_in
        target: csr1000v_node

  web_server:
    type: cloudify.openstack.nodes.Server
    properties:
      install_agent: true
      management_network_name: { get_input: management_network_name }
      agent_config:
        user: 'centos'
    interfaces:
      cloudify.interfaces.lifecycle:
        create:
          inputs:
            args:
              config_drive: true
              image: { get_input: vm_image }
              flavor: { get_input: vm_flavor }
              userdata: |
                #!/bin/bash
                echo "DEVICE=eth1" >> /etc/sysconfig/network-scripts/ifcfg-eth1
                echo "BOOTPROTO="dhcp" >> /etc/sysconfig/network-scripts/ifcfg-eth1
                echo "ONBOOT=yes" >> /etc/sysconfig/network-scripts/ifcfg-eth1
                echo "TYPE=Ethernet" >> /etc/sysconfig/network-scripts/ifcfg-eth1
                echo "USERCTL=yes" >> /etc/sysconfig/network-scripts/ifcfg-eth1
                echo "PEERDNS=no" >> /etc/sysconfig/network-scripts/ifcfg-eth1
                echo "DEFROUTE=no" >> /etc/sysconfig/network-scripts/ifcfg-eth1
                echo "IPV6INIT=no" >> /etc/sysconfig/network-scripts/ifcfg-eth1
                echo "PERSISTENT_DHCLIENT="1" >> /etc/sysconfig/network-scripts/ifcfg-eth1
                echo "172.21.0.0/28 via 172.11.0.1 dev eth1" >> /etc/sysconfig/network-scripts/route-eth1
                systemctl restart network
    relationships:
      - target: network1_port2
        type: cloudify.relationships.connected_to
      - target: csr_security_group
        type: cloudify.openstack.server_connected_to_security_group
      - target: csr1000v-set-hostname
        type: cloudify.relationships.depends_on

  httpd_web_server:
    type: cloudify.nodes.ApplicationServer
    interfaces:
      cloudify.interfaces.lifecycle:
        create: 
          implementation: scripts/httpd_create.sh
          inputs:
            process:
              cwd: /tmp
    relationships:
      - type: cloudify.relationships.contained_in
        target: web_server


  client_vm:
    type: cloudify.openstack.nodes.Server
    properties:
      install_agent: true
      management_network_name: { get_input: management_network_name }
      agent_config:
        user: 'centos'
    interfaces:
      cloudify.interfaces.lifecycle:
        create:
          inputs:
            args:
              config_drive: true
              image: { get_input: vm_image }
              flavor: { get_input: vm_flavor }
              userdata: |
                #!/bin/bash
                echo "DEVICE=eth1" >> /etc/sysconfig/network-scripts/ifcfg-eth1
                echo "BOOTPROTO="dhcp" >> /etc/sysconfig/network-scripts/ifcfg-eth1
                echo "ONBOOT=yes" >> /etc/sysconfig/network-scripts/ifcfg-eth1
                echo "TYPE=Ethernet" >> /etc/sysconfig/network-scripts/ifcfg-eth1
                echo "USERCTL=yes" >> /etc/sysconfig/network-scripts/ifcfg-eth1
                echo "PEERDNS=no" >> /etc/sysconfig/network-scripts/ifcfg-eth1
                echo "DEFROUTE=no" >> /etc/sysconfig/network-scripts/ifcfg-eth1
                echo "IPV6INIT=no" >> /etc/sysconfig/network-scripts/ifcfg-eth1
                echo "PERSISTENT_DHCLIENT="1" >> /etc/sysconfig/network-scripts/ifcfg-eth1
                echo "172.11.0.0/28 via 172.21.0.1 dev eth1" >> /etc/sysconfig/network-scripts/route-eth1
                systemctl restart network
    relationships:
      - target: network2_port2
        type: cloudify.relationships.connected_to
      - target: csr_security_group
        type: cloudify.openstack.server_connected_to_security_group
      - target: client_vm_floating_ip
        type: cloudify.openstack.server_connected_to_floating_ip
        
  network1:
    type: cloudify.openstack.nodes.Network
    properties:
      resource_id: { get_input: cisco_network1 }
      use_external_resource : false

  network1_subnet:
    type: cloudify.openstack.nodes.Subnet
    properties:
      resource_id: { get_input: cisco_network1_subnet }
      use_external_resource : false
      subnet:
        cidr: { get_input: cisco_network1_cidr }
        ip_version: 4
    relationships:
      - target: network1
        type: cloudify.relationships.contained_in

  network1_port1:
    type: cloudify.openstack.nodes.Port
    properties:
      use_external_resource : false
      fixed_ip: { get_input: network1_cisco_port_ip }
    interfaces:
      cloudify.interfaces.lifecycle:
        create:
          inputs:
            args:
              allowed_address_pairs:
                - ip_address: "0.0.0.0/0"
    relationships:
      - type: cloudify.relationships.contained_in
        target: network1
      - type: cloudify.relationships.depends_on
        target: network1_subnet

  network1_port2:
    type: cloudify.openstack.nodes.Port
    properties:
      use_external_resource : false
      fixed_ip: { get_input: web_server_port_ip }
    relationships:
      - type: cloudify.relationships.contained_in
        target: network1
      - type: cloudify.relationships.depends_on
        target: network1_subnet

  network2:
    type: cloudify.openstack.nodes.Network
    properties:
      resource_id: { get_input: cisco_network2 }
      use_external_resource : false

  network2_subnet:
    type: cloudify.openstack.nodes.Subnet
    properties:
      resource_id: { get_input: cisco_network2_subnet }
      use_external_resource : false
      subnet:
        cidr: { get_input: cisco_network2_cidr }
        ip_version: 4
    relationships:
      - target: network2
        type: cloudify.relationships.contained_in

  network2_port1:
    type: cloudify.openstack.nodes.Port
    properties:
      use_external_resource : false
      fixed_ip: { get_input: network2_cisco_port_ip }
    interfaces:
      cloudify.interfaces.lifecycle:
        create:
          inputs:
            args:
              allowed_address_pairs:
                - ip_address: "0.0.0.0/0"
    relationships:
      - type: cloudify.relationships.contained_in
        target: network2
      - type: cloudify.relationships.depends_on
        target: network2_subnet

  network2_port2:
    type: cloudify.openstack.nodes.Port
    properties:
      use_external_resource : false
      fixed_ip: { get_input: client_port_ip }
    relationships:
      - type: cloudify.relationships.contained_in
        target: network2
      - type: cloudify.relationships.depends_on
        target: network2_subnet

  # network3:
  #   type: cloudify.openstack.nodes.Network
  #   properties:
  #     resource_id: 'network3'
  #     use_external_resource : false

  # network3_subnet:
  #   type: cloudify.openstack.nodes.Subnet
  #   properties:
  #     resource_id: 'network3_subnet'
  #     use_external_resource : false
  #     subnet:
  #       cidr: 172.13.0.0/28
  #       ip_version: 4
  #   relationships:
  #     - target: network3
  #       type: cloudify.relationships.contained_in

  # network3_port:
  #   type: cloudify.openstack.nodes.Port
  #   properties:
  #     use_external_resource : false
  #     fixed_ip: 172.13.0.3
  #   relationships:
  #     - type: cloudify.relationships.contained_in
  #       target: network3
  #     - type: cloudify.relationships.depends_on
  #       target: network3_subnet

  # network4:
  #   type: cloudify.openstack.nodes.Network
  #   properties:
  #     resource_id: 'network4'
  #     use_external_resource : false

  # network4_subnet:
  #   type: cloudify.openstack.nodes.Subnet
  #   properties:
  #     resource_id: 'network4_subnet'
  #     use_external_resource : false
  #     subnet:
  #       cidr: 172.14.0.0/28
  #       ip_version: 4
  #   relationships:
  #     - target: network4
  #       type: cloudify.relationships.contained_in
  
  # network4_port:
  #   type: cloudify.openstack.nodes.Port
  #   properties:
  #     use_external_resource : false
  #     fixed_ip: 172.14.0.3
  #   relationships:
  #     - type: cloudify.relationships.contained_in
  #       target: network4
  #     - type: cloudify.relationships.depends_on
  #       target: network4_subnet

  csr_security_group:
    type: cloudify.openstack.nodes.SecurityGroup
    properties:
      security_group:
        name: csr_security_group
      rules:
        - protocol: tcp
        - protocol: udp
        - protocol: icmp
          port_range_min: 0
          port_range_max: 0
          remote_ip_prefix: 0.0.0.0/0

  csr_floating_ip:
    type: cloudify.openstack.nodes.FloatingIP
    properties:
      floatingip:
        floating_network_name: { get_input: external_network_name }

  client_vm_floating_ip:
    type: cloudify.openstack.nodes.FloatingIP
    properties:
      floatingip:
        floating_network_name: { get_input: external_network_name }

outputs:

  CSR1000V:
    value:
      Floating_IP: { get_attribute: [ csr_floating_ip, floating_ip_address ] }
  Client_VM:
    value:
      Floating_IP: { get_attribute: [ client_vm_floating_ip, floating_ip_address ] }